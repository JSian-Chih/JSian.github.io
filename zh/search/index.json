[{"content":"\r論文: Active Learning Literature Survey 此文章為大學時期修課時寫的，更新上來之後再整理。\nAbstract 主動式學習(Active Learning)的核心思想是利用較少的已標註數據，得到同樣優良的準確率。在大部分機器學習(Machine Learning)問題中，未標註的數據量遠比已標註的數據多，且易於取得。但是要給予所有未標註的數據人工的標註又太耗費人力成本。所以主動式學習變成解決這跟問題的一道良方。此文章對於主動式學習的介紹非常詳細，包括舉例可能遇到的事件或問題(Scenarios)、查詢策略框架(Query Strategy Frameworks)、主動式學習在實務經驗與理論上的分析(Analysis of Active Learning)、設置變量的問題(Problem Setting Variants)和相關的研究領域(Related Research Area)。\n論文方法 文章一開始先介紹了何謂主動式學習(又稱Query Learning或Optimal Experimental Design)，並且對當時(2009)現有的主動式學習的應用提出舉例，如:Speech recognition、Information extraction和Classification and filtering。接著文章提及pool-based active learning cycle做例子，比較使用已標註和未標註的數據進行訓練得到的結果，與主動式學習和被動式學習(passive learning)再分別棒球與曲棍球的表現。發現使用挑選過的未標註數據進行主動式學習，有時候反而能讓模型得到較高的準確率。\nScenarios 作者列出了三種情況: (i) membership query synthesis、(ii) stream-based selective sampling和(iii) pool-based active learning。作者舉例許多文獻表示，由模型申請標註數據的Query Synthesis在特定領域更高效率的解決問題，例如學習預測機械手臂的絕對座標。此方法較適合讓模型依據經驗標註數據，如果給予數據是由人工標註，反而可能降低準確率。Stream-based Selective Sampling則是讓模型在大量的未標註數據中選擇數據標註，如果樣本數據屬於uniform distribution，則效果可能跟Query Synthesis一樣好。但模型選擇由人工標註樣本的判斷條件依據不同的任務而有不同，且須查詢大量數據，查詢成本很高。相較於Stream-based Selective Sampling，Pool-based Active Learning可以直接遠出樣本池中貢獻度最高的樣本數據，降低查詢成本與標註成本，使得此類方法備覺廣泛使用。\nQuery Strategy Frameworks 文章中概述幾種對於數據選擇與處理的方式。Uncertainty Sampling，模型應該要積極的找尋較難以被標註的未標註數據，此方法通常適用於概率學習型模型。作者也有舉例用於非概率學習型模型的例子。Query-By-Committee(QBC)該方法設定了一個集合，集合的元素用於儲存不同的模型的數據，每一個模型分別查詢未標註的數據，選擇並儲存。最後依據集合的參數，被選擇最多次的數據就是被選擇要回傳受編著的數據。Expected Model Change，此方法是在被標註的數據中選擇最能改變模型效果的目標。Discriminative Probabilistic Models判斷將能改變最大訓練梯度得樣本作為該被選擇加入的樣本。但實際上樣本是為被標註的，所以還須事先計算在各種不同標註下的期望損失(loss)。Variance Reduction and Fisher Information Ratio，此方法適用於分析並減少模型未來的誤差。可以知道模型對於數據的不確定性和模型參數間的關係。Estimated Error Reduction，是想查詢最小化未來誤差的數據，而這可能是五種策略中成本最高的。Density-Weighted Methods，作者在最後提到Uncertainty Sampling和Query-By-Committee(QBC)容易查詢到異常直，因此才提出Fisher Information Ratio和Estimated Error Reduction，而使用不同的權重控制整個演算法模型。\nAnalysis of active learning 作者利用經驗與理論兩種層面分析主動式學習，就經驗上來說主動式學習是有效的，但如果模型改變，訓練用數據可能無法再達到一樣的效果。而理論的分析可以讓我們知道如何更有效的使用主動式學習。不過大部的主動式學習還是用在非常複雜或極端的演算法上，有待之後的研究補強。\nProblem Setting Variants 接著，作者補出了幾個擴展傳統主動式學習的方法已應付更複雜的問題。Active Learning for Structured Output，提到利用序列與樹(sequence and trees)的概念改進演算法。Batch-Mode Active Learning，藉由改變模型訓練的速度去適應不同的方法與結構。Active Learning with Costs，討論成本(cost)的變化在不同的情況下如何影響模型。\nRelated Research Areas 文章最後作者舉例跟主動式學習相關的領域研究。包括:Semi-Supervised Learning、Reinforcement Learing、Equivalence Query Learning、Active Class Selection、Active Feature Acquisition and Classification和Modal Parroting and Compression。\n結果與討論 這篇文章寫於2009年，作者以當時現有的研究與文獻對於主動式學習做了一個通盤的整理與歸納，使得像是我們這般初學者可以更快的對於這個領域有概括性的了解。作者亦對於不同的領域提出想法與總結，讓我們更快切入重點。其中出現了許多不同的概念，我在上網查找資料時學到很多，更發現網路上關於主動式學習的文章大多引用了這篇文獻。文章中的列舉和說明，與最後的參考文獻，也指引了往不同方向研究的標竿。\n","date":"2024-03-27T15:54:21+08:00","image":"https://jsian-chih.github.io/JSian.github.io/zh/p/paper-active-learning-literature-survey/cover_hu0685165e77bed5d76c546c4bb90bb557_1514980_120x120_fill_q75_box_smart1.jpg","permalink":"https://jsian-chih.github.io/JSian.github.io/zh/p/paper-active-learning-literature-survey/","title":"Paper: Active Learning Literature Survey"},{"content":"\rMy LaTeX user guide 我的操作環境是安裝texlive，並使用VSCode擴充LaTeX Workshop。\nLaTeX LaTeX 是標記式語言(markup language)，運作方式與HTML類似，用標記來指定排版，文字大小、顏色等。\n以下是最簡單的LaTeX原始碼:\n1 2 3 4 5 6 7 8 9 10 \\documentclass{article} %宣告區 \\begin{document} %本文區 My name is Sian! \\end{document} .tex 文件 - 基本架構 設定文件類型 1 \\documentclass[options]{class_name} {class_name} 為此篇文書的類型:\nclass_name 說明 article 用來排版學術論文、學術報告等 report 格式有文章結構，用來排版回顧類、長篇論文、報告 book 排版出版書籍 proc 學術論文模板 slides 簡報格式的文檔 moderncv 用於個人簡歷 beamer 用於製作簡報 [options] 為可選用參數(可省略):\noptions 說明 10pt 字體大小，不輸入時預設為10pt a4paper 紙張大小，預設為letterpaper，可選擇: a4paper、a5paper、b5paper、executivepaper 和 legalpaper titlepage 是否有標題頁，article預設為notitlepage，report和book預設為titlepage landscape 令排版方向為橫向，不輸入時預設為縱向 onecolumn 令單雙欄排版，預設為onecolumn，可選擇: twocolumn fleqn 令公式向左對齊，不輸入時預設置中 leqno 令公式編號在左，不輸入時預設在右 final 文稿模式，預設為final(終稿)，可選擇: draft(草稿) oneside 單雙面，預設為單面(oneside)，可選擇: twoside 宣告區 (中文輸入使用方法) 宣告區用於宣告使用的宏包(類似函式庫)、文章基本資訊與特殊功能(未來備註)。\n1 2 3 4 5 6 7 8 %宣告使用宏包 \\usepackage{ctex} \\usepackage{package_name} %文章基本資訊 \\title{ 標題名稱 } \\author{ 作者名稱 } \\date{ \\today } xeCJK 為一支持中文編輯的宏包，允許在文檔中使用中文，且支援許多中文字體(詳情看範例)。以下為使用字體範例:\n1 2 3 4 5 6 7 8 \\begin{document} %中括號內打上使用字體(到電腦\u0026#34;字型\u0026#34;設定查詢) \\newCJKfontfamily{\\Kai}{標楷體} \\setCJKmainfont{標楷體} \\end{document} 使用xeCJK時: 使用XeLaTeX編譯，XeLaTeX是一種使用Unicode的LaTeX排版引擎，預設輸入文件以utf-8編碼。使用命令 xelatex .tex 編譯產生PDF文件。\n文章基本資訊可以設定文章標題(\\title)、作者(\\author)與日期(\\date)等。\\and 用於連接每個作者，\\thanks命令會產生一個對應的腳註，用以致謝或標註聯絡方式。在文本區使用 \\maketitle 即可產生標題。見範例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \\documentclass[UTF8]{article} %宣告使用宏包 \\usepackage{xeCJK} %文章基本資訊 \\title{ 成大校狗研究報告 } \\author{ 乖乖黃 \\\\ 國立成功大學, 雲平幫 \\and 白臉\\thanks{E-mail} \\\\ 國立成功大學, 雲平幫 \\and 呆呆 \\\\ 國立成功大學, 自強三傻 \\and 麵線 \\\\ 國立成功大學, 自強三傻 \\and 米香 \\\\ 國立成功大學, 自強三傻 } \\date{ \\today } \\begin{document} %本文區 \\maketitle My name is Sian! \\end{document} 輸出結果: 利用authblk宏包可以幫助標註多作者與研究單位，中括號 ([*]) 可幫作者與研究單位編號對應。在文本區使用 \\maketitle 即可產生標題。見範例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \\documentclass[UTF8]{article} %宣告使用宏包 \\usepackage{xeCJK} \\usepackage{authblk} %文章基本資訊 \\title{ 成大校狗研究報告 } \\author[1]{ 乖乖黃 } \\author[2]{ 白臉 } \\author[3]{ 呆呆 } \\author[4]{ 麵線 } \\author[5]{ 米香 } \\affil[1,2]{ 雲平幫 } \\affil[3,4,5]{ 自強三傻 } \\date{ \\today } \\begin{document} %本文區 \\maketitle My name is Sian! \\end{document} 輸出結果: 其實文章基本資訊也可以打在本文區。\n本文區 (包括一些命令) 待續\u0026hellip;\nBeamer: 如何利用LaTeX製作簡報 參考\u0026quot;自用Beamer Theme\u0026quot;。(待補)\n數學公式參考 ","date":"2023-01-20T15:54:21+08:00","image":"https://jsian-chih.github.io/JSian.github.io/zh/p/my-latex-user-guide/cover_hu0685165e77bed5d76c546c4bb90bb557_1514980_120x120_fill_q75_box_smart1.jpg","permalink":"https://jsian-chih.github.io/JSian.github.io/zh/p/my-latex-user-guide/","title":"My LaTeX user guide"},{"content":"\r搭建 VScode 的LaTeX 編寫環境 安裝 texlive 與 VScode For Windows 系統 進入texlive 下載頁面，點擊 「install-tl-windows.exe」。 使用「工作管理員」，開啟「install-tl-windows.exe」。 選擇「install」，點「next」。 點「install」。 選擇安裝路徑，點「install」。 直到看到這句話就代表安裝完成。(安裝時間可能高達數小時，這是正常的) VScode 的安裝可參考: C++ programming with Visual Studio Code (Using gcc/g++ with MinGW) 在 VScode 上配置環境 搜尋「LaTeX Workshop」擴充插件，安裝。 打開VScode，按crtl+P或F1打開命令行。輸入\u0026gt;settings (JSON)。選擇「Open User Setting」。 複製以下程式碼加入「setting.json」。此部分定義:pdf的閱讀方式，自動編譯與訊息的表示方式等細項。 1 2 3 4 5 6 7 // LaTeX 配置 \u0026#34;latex-workshop.view.pdf.viewer\u0026#34;: \u0026#34;tab\u0026#34;, \u0026#34;latex-workshop.latex.autoBuild.run\u0026#34;: \u0026#34;never\u0026#34;, \u0026#34;latex-workshop.showContextMenu\u0026#34;: true, \u0026#34;latex-workshop.intellisense.package.enabled\u0026#34;: true, \u0026#34;latex-workshop.message.error.show\u0026#34;: false, \u0026#34;latex-workshop.message.warning.show\u0026#34;: false, 複製以下程式碼加入「setting.json」。此部分定義:LaTeX 的編譯工具。LaTeX Workshop 默認的編譯工具為latexxmk。這裡加入中文環境常用的xelatex，IEEE用的pdflatex，交互參照參考文獻要用的bibtex。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026#34;latex-workshop.latex.tools\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;xelatex\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;xelatex\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;-shell-escape\u0026#34;, \u0026#34;-synctex=1\u0026#34;, \u0026#34;-interaction=nonstopmode\u0026#34;, \u0026#34;-file-line-error\u0026#34;, \u0026#34;%DOCFILE%\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;pdflatex\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;pdflatex\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;-shell-escape\u0026#34;, \u0026#34;-synctex=1\u0026#34;, \u0026#34;-interaction=nonstopmode\u0026#34;, \u0026#34;-file-line-error\u0026#34;, \u0026#34;%DOCFILE%\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;latexmk\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;latexmk\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;-shell-escape\u0026#34;, \u0026#34;-synctex=1\u0026#34;, \u0026#34;-interaction=nonstopmode\u0026#34;, \u0026#34;-file-line-error\u0026#34;, \u0026#34;-pdf\u0026#34;, \u0026#34;-outdir=%OUTDIR%\u0026#34;, \u0026#34;%DOCFILE%\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;bibtex\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;bibtex\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;%DOCFILE%\u0026#34; ] } ], 複製以下程式碼加入「setting.json」。此部分定義:LaTeX 的編譯鏈，決定編譯的順序與方式。放在首位的將被定義為默認的編譯方式。 需要編譯bib檔案的情況下須使用\u0026quot;xelatex -\u0026gt; bibtex -\u0026gt; xelatex*2\u0026quot; 或 \u0026quot;pdflatex -\u0026gt; bibtex -\u0026gt; pdflatex*2\u0026quot; 編譯。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 \u0026#34;latex-workshop.latex.recipes\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;XeLaTeX\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;xelatex\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;PDFLaTeX\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;pdflatex\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;BibTeX\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;bibtex\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;LaTeXmk\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;latexmk\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;xelatex -\u0026gt; bibtex -\u0026gt; xelatex*2\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;xelatex\u0026#34;, \u0026#34;bibtex\u0026#34;, \u0026#34;xelatex\u0026#34;, \u0026#34;xelatex\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;pdflatex -\u0026gt; bibtex -\u0026gt; pdflatex*2\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;pdflatex\u0026#34;, \u0026#34;bibtex\u0026#34;, \u0026#34;pdflatex\u0026#34;, \u0026#34;pdflatex\u0026#34; ] }, {\u0026#34;name\u0026#34;: \u0026#34;xelatex*2\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;xelatex\u0026#34;,\u0026#34;xelatex\u0026#34; ] }, ], 複製以下程式碼加入「setting.json」。此部分定義:自動清除編譯的中間產物。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026#34;latex-workshop.latex.clean.fileTypes\u0026#34;: [ // \u0026#34;*.aux\u0026#34;, \u0026#34;*.bbl\u0026#34;, \u0026#34;*.blg\u0026#34;, \u0026#34;*.idx\u0026#34;, \u0026#34;*.ind\u0026#34;, \u0026#34;*.lof\u0026#34;, \u0026#34;*.lot\u0026#34;, \u0026#34;*.out\u0026#34;, // \u0026#34;*.toc\u0026#34;, \u0026#34;*.acn\u0026#34;, \u0026#34;*.acr\u0026#34;, \u0026#34;*.alg\u0026#34;, \u0026#34;*.glg\u0026#34;, \u0026#34;*.glo\u0026#34;, \u0026#34;*.gls\u0026#34;, \u0026#34;*.ist\u0026#34;, \u0026#34;*.fls\u0026#34;, \u0026#34;*.log\u0026#34;, \u0026#34;*.fdb_latexmk\u0026#34; ], \u0026#34;latex-workshop.latex.autoClean.run\u0026#34;: \u0026#34;onFailed\u0026#34;, \u0026#34;latex-workshop.latex.recipe.default\u0026#34;: \u0026#34;lastUsed\u0026#34;, \u0026#34;latex-workshop.view.pdf.internal.synctex.keybinding\u0026#34;: \u0026#34;double-click\u0026#34;, Remark: 有無最後的逗點取決於:此json檔在這段程式碼後，是否結束。如果接續其他設定，則要加逗號。\n完成! 到此為止基礎的環境配置已經完成。完成程式碼後，使用crtl+alt+B利用默認的方式編譯。或根據下圖指示編譯方式。使用crtl+alt+V可以快速打開pdf進行預覽。參考: My LaTeX user guide。 追加介紹: 使用SumatraPDF 外部程式閱讀編譯後的pdf並配置正向和反向搜索。 Why SumatraPDF ? 其open souce 與不鎖定pdf 的特性使我們可以自定義其操作環境，輕鬆配置與LaTeX 源碼的正反向搜索。並在開啟pdf 的狀況下依然可以編譯並修改pdf 文件。\nRemark: 如果使用內置的pdf閱讀器，不須進行額外配置，即可使用正反像搜索。\n安裝與配置 進入下載頁面並下載安裝檔。 開啟安裝檔，右下角「option」可以顯示安裝選項。完成設定後開始安裝。 看到以下畫面代表安裝完成。 回到VScode， 按crtl+P或F1打開命令行。輸入\u0026gt;settings (JSON)。選擇「Open User Setting」。加入以下兩行。 1 2 3 \u0026#34;latex-workshop.view.pdf.viewer\u0026#34;: \u0026#34;external\u0026#34;, \u0026#34;latex-workshop.view.pdf.external.viewer.command\u0026#34;: \u0026#34;D:/SumatraPDF/SumatraPDF.exe\u0026#34;, 至此，SumatraPDF閱讀pdf的配置已完成。 正向搜索 按crtl+P或F1打開命令行。輸入\u0026gt;settings (JSON)。選擇「Open User Setting」。將第一行與第八行的路徑分別改為SumatraPDF與VScode的安裝路徑。 1 2 3 4 5 6 7 8 9 \u0026#34;latex-workshop.view.pdf.external.synctex.args\u0026#34;: [ \u0026#34;-forward-search\u0026#34;, \u0026#34;%TEX%\u0026#34;, \u0026#34;%LINE%\u0026#34;, \u0026#34;-reuse-instance\u0026#34;, \u0026#34;-inverse-search\u0026#34;, \u0026#34;\\\u0026#34;D:\\\\Microsoft VS Code\\\\Code.exe\\\u0026#34; \\\u0026#34;D:\\\\Microsoft VS Code\\\\resources\\\\app\\\\out\\\\cli.js\\\u0026#34; --ms-enable-electron-run-as-node -r -g \\\u0026#34;%f:%l\\\u0026#34;\u0026#34;, \u0026#34;%PDF%\u0026#34; ], 回到LaTeX 源碼，使用 crtl+alt+J 即可正向收尋到pdf中的相對位置。也可按照下圖操作。 反向搜索 進入SumatraPDF的高級設置文件。 找到:InverseSearchCmdLine 與 EnableTeXEnhancements 這兩個參數。修改為下列所示，注意路徑要與先前安裝的一致。 1 2 InverseSearchCmdLine = \u0026#34;D:\\Microsoft VS Code\\Code.exe\u0026#34; \u0026#34;D:\\Microsoft VS Code\\resources\\app\\out\\cli.js\u0026#34; --ms-enable-electron-run-as-node -r -g \u0026#34;%f:%l\u0026#34; EnableTeXEnhancements = true 使用ctrl+alt+V打開pdf文件後，雙擊左鍵即可反向跳轉至LaTeX 源碼的相對位置。 追加介紹: 使用Sioyek 外部程式閱讀編譯後的pdf並配置正向和反向搜索。 Why Sioyek? Sioyek 為技術性與學術性閱讀開發的pdf閱讀器，一樣擁有open souce 與不鎖定pdf 的特性。\n安裝與配置正向收尋 進入官網，點選「download」。選擇Windows版本下載。 下載後解壓縮，並將資料夾放置於一個固定位置。\n回到VScode， 按crtl+P或F1打開命令行。輸入\u0026gt;settings (JSON)。選擇「Open User Setting」。加入以下程式碼，將第一、二、五行的路徑分別改為sioyek與VScode的安裝路徑。\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026#34;latex-workshop.view.pdf.external.viewer.command\u0026#34;: \u0026#34;D:/sioyek_release_windows/sioyek.exe\u0026#34;, \u0026#34;latex-workshop.view.pdf.external.synctex.command\u0026#34;: \u0026#34;D:/sioyek_release_windows/sioyek.exe\u0026#34;, \u0026#34;latex-workshop.view.pdf.external.synctex.args\u0026#34;: [ \u0026#34;--inverse-search\u0026#34;, \u0026#34;\\\u0026#34;D:/Microsoft VS Code/Code.exe\\\u0026#34; \\\u0026#34;D:/Microsoft VS Code/resources/app/out/cli.js\\\u0026#34; --ms-enable-electron-run-as-node -r -g \\\u0026#34;%1:%2\\\u0026#34;\u0026#34;, \u0026#34;--reuse-instance\u0026#34;, \u0026#34;--forward-search-file\u0026#34;, \u0026#34;%TEX%\u0026#34;, \u0026#34;--forward-search-line\u0026#34;, \u0026#34;%LINE%\u0026#34;, \u0026#34;%PDF%\u0026#34; ], 至此，sioyek閱讀pdf的配置已完成。回到LaTeX 源碼，使用 crtl+alt+J 即可正向搜尋到pdf中的相對位置。 反向搜尋 進入放置sioyek的資料夾中，打開「prefs.config」檔案。找到inverse_search_command，並修改為: 1 inverse_search_command \u0026#34;D:\\Microsoft VS Code\\Code.exe\u0026#34; \u0026#34;D:\\Microsoft VS Code\\resources\\app\\out\\cli.js\u0026#34; --ms-enable-electron-run-as-node -r -g \u0026#34;%1:%2\u0026#34; 使用ctrl+alt+V打開pdf文件後，按F4進入「synctex mode」。右鍵點擊，即可反向跳轉至LaTeX 源碼的相對位置。 追加介紹: LaTeX 編譯的中間產物與注意事項 LaTeX 在編譯過程中會生成相當多的輔助文件和日誌(log)。如交互參照、參考文獻、目錄、索引等功能，需要先編譯生成輔助文件，再次編譯時讀入輔助文件得到正確的結果。因此，才需要定義編譯鏈，已得到較複雜的編譯結果。\nlog: 排版引擎生成的日誌文件，供排查錯誤使用。 aux: LaTeX 生成的主輔助文件，記錄交互參照、目錄、參考文獻的引用等。 toc: LaTeX 生成的目錄記錄文件。 lof: LaTeX 生成的圖片目錄記錄文件。 lot: LaTeX 生成的表格目錄記錄文件。 bbl: BibTeX 生成的參考文獻記錄文件。 blg: BibTeX 生成的日誌文件。 idx: LaTeX 生成的供 makeindex 處理的索引記錄文件。 ind: makeindex 處理 .idx 生成的格式化索引記錄文件。 ilg: makeindex 生成的日誌文件。 out: hyperref 宏包生成的 PDF 書籤記錄文件。 大部分的中間產物可以透過先前的設定在編譯完成後自動刪除。但 .log、 .aux、 .synctex.gz建議留下，因為這些文件分別跟error code、交互參照、正反向搜索有關。刪除會導致正反向搜索功能失效或造成debug困難。\n追加介紹: 快捷鍵修改與自定義 按crtl+P或F1打開命令行。輸入\u0026gt;keyboard，點選「Open Keyboard Shortcuts (JSON)」 可以根據下列範例自由定義快捷鍵。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \u0026#34;key\u0026#34;: \u0026#34;alt+b\u0026#34;, //編譯 \u0026#34;command\u0026#34;: \u0026#34;latex-workshop.build\u0026#34;, \u0026#34;when\u0026#34;: \u0026#34;editorTextFocus \u0026amp;\u0026amp; !isMac\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;alt+t\u0026#34;, //終止編譯 \u0026#34;command\u0026#34;: \u0026#34;latex-workshop.kill\u0026#34;, \u0026#34;when\u0026#34;: \u0026#34;editorTextFocus \u0026amp;\u0026amp; !isMac\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;alt+j\u0026#34;, //正向搜索 \u0026#34;command\u0026#34;: \u0026#34;latex-workshop.synctex\u0026#34;, \u0026#34;when\u0026#34;: \u0026#34;editorTextFocus \u0026amp;\u0026amp; !isMac\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;alt+e\u0026#34;, //選擇編譯方式 \u0026#34;command\u0026#34;: \u0026#34;latex-workshop.recipes\u0026#34; }, ","date":"2023-01-20T15:46:22+08:00","image":"https://jsian-chih.github.io/JSian.github.io/zh/p/vscode_latex_tutorial/cover_hu18be54e43eafcc95dcec893c1e1a7622_3588945_120x120_fill_q75_box_smart1.jpg","permalink":"https://jsian-chih.github.io/JSian.github.io/zh/p/vscode_latex_tutorial/","title":"搭建 VScode 的LaTeX 編寫環境"},{"content":"\rC++ programming with Visual Studio Code (Using gcc/g++ with MinGW) To use the GCC (g++) C/C++ compiler and GDB debugger from mingw-w64, this tutorial teach you about how to install the MinGW and C/C++ extension for VS Code.\nPrerequisites Install Visual Studio Code and C/C++ extension for VS Code Install Visual Studio Code: choose \u0026ldquo;Windows\u0026rdquo; to download the installer. Choose \u0026ldquo;I accept\u0026rdquo; and press \u0026ldquo;Next\u0026rdquo;. Set your install path and press \u0026ldquo;Next\u0026rdquo;. Press \u0026ldquo;Next\u0026rdquo;. Tick these two options for \u0026ldquo;Open with Code\u0026rdquo; in \u0026ldquo;Create code file and enjoy it\u0026rdquo; Press \u0026ldquo;Install\u0026rdquo;. After the installation finish, close the window and open the VScode. Install the C/C++ extension for VS Code by searching for \u0026lsquo;c++\u0026rsquo; in the Extensions view (Ctrl+Shift+X). Install MinGW Install MinGW - Minimalist GNU for Windows. Please change the directory path to which you can find easily. Open MinGW Installation Manager, and mark \u0026ldquo;mingw32-base\u0026rdquo; and \u0026ldquo;mingw32-gcc-g++\u0026rdquo; for installation. Click \u0026ldquo;Apply Changes\u0026rdquo; and \u0026ldquo;Apply\u0026rdquo;. Click \u0026ldquo;Apply\u0026rdquo;. Wait for the installation. Add the MinGW path to the Windows PATH environment Open your Windows Settings. Search \u0026ldquo;Edit environment variables for your account (編輯您的帳戶的環境變數)\u0026rdquo;. Choose the \u0026ldquo;Path\u0026rdquo; in user variables, and edit it. Open your MinGW directory path which you select above to the system path, and copy the path of the bin folder. Select \u0026ldquo;New\u0026rdquo; to add the path of your bin folder under the MinGW directory path. Select \u0026ldquo;OK\u0026rdquo; to save the updated path. Check your MinGW installation Search \u0026ldquo;cmd\u0026rdquo;, and open \u0026ldquo;Command prompt (命令提示字元)\u0026rdquo;. Type following command: 1 2 3 gcc --version g++ --version gdb --version If you don\u0026rsquo;t see the version information or the command is not recognized, please check your \u0026ldquo;path\u0026rdquo; of MinGW folder and make sure your installation process correctly. Create code file and enjoy it You can open your folder and right-click to open with code . (Ref: Step.5 in Install Visual Studio Code and C/C++ extension for VS Code) You can create a .cpp file by click the \u0026ldquo;New File\u0026rdquo; , and program your code. For C: 1 2 3 4 5 6 7 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(){ printf(\u0026#34;Hello\\n\u0026#34;); return 0; } For C++: 1 2 3 4 5 6 7 8 #include \u0026lt;iostream\u0026gt; using namespace std; int main(){ cout \u0026lt;\u0026lt; \u0026#34;Hello\\n\u0026#34;; return 0; } Press Ctrl+Shift+B and select \u0026ldquo;C/C++: gcc.exe\u0026rdquo; or \u0026ldquo;C/C++: g++.exe\u0026rdquo; to build your code. You will find the .exe file in the workspace. Press Ctrl+Shift+` to open terminal, and type .\\FileName.exe to run the executable file. Congratulation! You have completed the basic environment construction. If there is a problem with your compilation step, stay tuned for the next tutorial update. ^_−☆ ","date":"2023-01-20T15:03:43+08:00","image":"https://jsian-chih.github.io/JSian.github.io/zh/p/vscode_c_tutorial/cover_hu4d840d3722ce836e58ab7fa8fcab7edb_1885790_120x120_fill_q75_box_smart1.jpg","permalink":"https://jsian-chih.github.io/JSian.github.io/zh/p/vscode_c_tutorial/","title":"C++ programming with Visual Studio Code (Using gcc/g++ with MinGW)"},{"content":"Welcome to Hugo theme Stack. This is your first post. Edit or delete it, then start writing!\nFor more information about this theme, check the documentation: https://docs.stack.jimmycai.com/\nWant a site like this? Check out hugo-theme-stack-stater\nPhoto by Pawel Czerwinski on Unsplash\n","date":"2022-03-06T00:00:00Z","image":"https://jsian-chih.github.io/JSian.github.io/zh/p/hello-world/cover_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://jsian-chih.github.io/JSian.github.io/zh/p/hello-world/","title":"Hello World"}]